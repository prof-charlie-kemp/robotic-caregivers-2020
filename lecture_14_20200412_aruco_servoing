#!/usr/bin/env python

from __future__ import print_function

import keyboard as kb

from sensor_msgs.msg import JointState
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry

import rospy
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction
from control_msgs.msg import FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint

from sensor_msgs.msg import PointCloud2

from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray

from control_msgs.msg import GripperCommandAction
from control_msgs.msg import GripperCommandGoal

from std_srvs.srv import Trigger, TriggerRequest

import math
import time
import threading
import sys

import tf2_ros

import hello_helpers.hello_misc as hm

import numpy as np

import argparse as ap


class GetKeyboardCommands:

    def __init__(self):
        self.step_size = 'medium'
        self.persistent_command_count = 0
        self.prev_persistent_c = None
        self.persistent_start_s = time.time()
        self.max_persistent_delay_s = 1.0
        self.rad_per_deg = math.pi/180.0
        self.small_deg = 3.0
        self.small_rad = self.rad_per_deg * self.small_deg
        self.small_translate = 0.005  #0.02
        self.medium_deg = 6.0
        self.medium_rad = self.rad_per_deg * self.medium_deg
        self.medium_translate = 0.04
        self.big_deg = 12.0
        self.big_rad = self.rad_per_deg * self.big_deg
        self.big_translate = 0.06
        self.mode = 'position' #'manipulation' #'navigation'

    def get_deltas(self):
        if self.step_size == 'small':
            deltas = {'rad': self.small_rad, 'translate': self.small_translate}
        if self.step_size == 'medium':
            deltas = {'rad': self.medium_rad, 'translate': self.medium_translate} 
        if self.step_size == 'big':
            deltas = {'rad': self.big_rad, 'translate': self.big_translate} 
        return deltas
        
    def get_command(self, node):
        command = None
        
        c = kb.getch()

        # Visual Servoing Demo
        if c == 'e' or c == 'E':
            command = 'toggle_error_printing'
        if c == 't' or c == 'T': 
            command = 'toggle_tracking'
        
        # 8 or up arrow
        if c == '8' or c == '\x1b[A':
            command = {'joint': 'joint_lift', 'delta': self.get_deltas()['translate']}
        # 2 or down arrow
        if c == '2' or c == '\x1b[B':
            command = {'joint': 'joint_lift', 'delta': -self.get_deltas()['translate']}
        if self.mode == 'manipulation':
            # 4 or left arrow
            if c == '4' or c == '\x1b[D':
                command = {'joint': 'joint_mobile_base_translation', 'delta': self.get_deltas()['translate']}
            # 6 or right arrow
            if c == '6' or c == '\x1b[C':
                command = {'joint': 'joint_mobile_base_translation', 'delta': -self.get_deltas()['translate']}
        elif self.mode == 'position':
            # 4 or left arrow
            if c == '4' or c == '\x1b[D':
                command = {'joint': 'translate_mobile_base', 'inc': self.get_deltas()['translate']}
            # 6 or right arrow
            if c == '6' or c == '\x1b[C':
                command = {'joint': 'translate_mobile_base', 'inc': -self.get_deltas()['translate']}
            # 1 or end key 
            if c == '7' or c == '\x1b[H':
                command = {'joint': 'rotate_mobile_base', 'inc': self.get_deltas()['rad']}
            # 3 or pg down 5~
            if c == '9' or c == '\x1b[5':
                command = {'joint': 'rotate_mobile_base', 'inc': -self.get_deltas()['rad']}
        elif self.mode == 'navigation':
            rospy.loginfo('ERROR: Navigation mode is not currently supported.')
            
        if c == 'w' or c == 'W':
            command = {'joint': 'wrist_extension', 'delta': self.get_deltas()['translate']}
        if c == 'x' or c == 'X':
            command = {'joint': 'wrist_extension', 'delta': -self.get_deltas()['translate']}
        if c == 'd' or c == 'D':
            command = {'joint': 'joint_wrist_yaw', 'delta': -self.get_deltas()['rad']}
        if c == 'a' or c == 'A':
            command = {'joint': 'joint_wrist_yaw', 'delta': self.get_deltas()['rad']}
        if c == '5' or c == '\x1b[E' or c == 'g' or c == 'G':
            # grasp
            command = {'joint': 'joint_gripper_finger_left', 'delta': -self.get_deltas()['rad']}
        if c == '0' or c == '\x1b[2' or c == 'r' or c == 'R':
            # release
            command = {'joint': 'joint_gripper_finger_left', 'delta': self.get_deltas()['rad']}
        if c == 'i' or c == 'I':
            command = {'joint': 'joint_head_tilt', 'delta': (2.0 * self.get_deltas()['rad'])}
        if c == ',' or c == '<':
            command = {'joint': 'joint_head_tilt', 'delta': -(2.0 * self.get_deltas()['rad'])}
        if c == 'j' or c == 'J':
            command = {'joint': 'joint_head_pan', 'delta': (2.0 * self.get_deltas()['rad'])}
        if c == 'l' or c == 'L':
            command = {'joint': 'joint_head_pan', 'delta': -(2.0 * self.get_deltas()['rad'])}
        if c == 'b' or c == 'B':
            rospy.loginfo('process_keyboard.py: changing to BIG step size')
            self.step_size = 'big'
        if c == 'm' or c == 'M':
            rospy.loginfo('process_keyboard.py: changing to MEDIUM step size')
            self.step_size = 'medium'
        if c == 's' or c == 'S':
            rospy.loginfo('process_keyboard.py: changing to SMALL step size')
            self.step_size = 'small'
        if c == 'q' or c == 'Q':
            rospy.loginfo('keyboard_teleop exiting...')
            rospy.signal_shutdown('Received quit character (q), so exiting')
            sys.exit()

        return command
        

class KeyboardTeleopNode(hm.HelloNode):

    def __init__(self):
        hm.HelloNode.__init__(self)
        self.keys = GetKeyboardCommands()
        self.rate = 10.0
        self.joint_state = None
        self.wrist_top_marker_id = None
        self.wrist_inner_marker_id = None
        self.wrist_marker_time = None
        self.wrist_position = None
        self.user_pointer_marker_id = None
        self.user_pointer_marker_time = None
        self.user_pointer_position = None
        self.error = None
        self.track_target = False
        self.print_error = True
        
    def joint_states_callback(self, joint_state):
        self.joint_state = joint_state
        #print('self.track_target =', self.track_target)
        #print('(self.error is not None) =', (self.error is not None))
        #print('(self.joint_state is not None) =', (self.joint_state is not None))
        if self.track_target and (self.error is not None) and (self.joint_state is not None):
            lift_m, wrist_m = self.get_lift_wrist_joints(self.joint_state)
            scaled_error = 0.5 * self.error
            new_lift_m = lift_m - scaled_error[0]
            drive_m = scaled_error[1]                
            new_wrist_m = wrist_m + scaled_error[2]
            track_command = {'wrist_extension': new_wrist_m,
                             'translate_mobile_base': drive_m, 
                             'joint_lift': new_lift_m}
            print('track_command =', track_command)
            self.move_to_pose(track_command, async=True)

    def aruco_callback(self, marker_array):
        #print(marker_array)
        self.wrist_marker_pose = None
        self.wrist_marker_time = None
        self.wrist_position = None
        self.user_pointer_marker_pose = None
        self.user_pointer_marker_time = None
        self.user_pointer_position = None
        self.error = None
        for marker in marker_array.markers:
            # set marker_time to the earliest marker time
            if marker.id == self.wrist_top_marker_id:
                self.wrist_marker_pose = marker.pose
                self.wrist_marker_time = marker.header.stamp
            if marker.id == self.wrist_inner_marker_id:
                if self.wrist_marker_pose is None:
                    self.wrist_marker_pose = marker.pose
                    self.wrist_marker_time = marker.header.stamp
            if marker.id == self.user_pointer_marker_id:
                self.user_pointer_marker_pose = marker.pose
                self.user_pointer_marker_time = marker.header.stamp
        if self.wrist_marker_pose is not None: 
            #print('self.wrist_marker_pose.position =')
            p = self.wrist_marker_pose.position
            #print(p)
            self.wrist_position = np.array([p.x, p.y, p.z])
        else:
            #try to use forward kinematics
            self.wrist_position = self.fk_wrist_position()
        if self.user_pointer_marker_pose is not None: 
            #print('self.user_pointer_marker_pose =')
            p = self.user_pointer_marker_pose.position
            #print(p)
            self.user_pointer_position = np.array([p.x, p.y, p.z])
        if (self.wrist_position is not None) and (self.user_pointer_position is not None):
            self.error = self.user_pointer_position - self.wrist_position
            if self.print_error:
                print('self.error =', self.error)
            
    def send_command(self, command):
        joint_state = self.joint_state
        if (joint_state is not None) and (command is not None):
            joint_name = command['joint']
            self.trajectory_goal.trajectory.joint_names = [joint_name]
            if 'inc' in command:
                inc = command['inc']
                rospy.loginfo('inc = {0}'.format(inc))
                new_value = inc
            elif 'delta' in command:
                joint_index = joint_state.name.index(joint_name)
                joint_value = joint_state.position[joint_index]
                delta = command['delta']
                rospy.loginfo('delta = {0}, joint_index = {1}, joint_value = {2}'.format(delta, joint_index, joint_value))
                new_value = joint_value + delta
            self.point.positions = [new_value]
            self.trajectory_goal.trajectory.points = [self.point]
            self.trajectory_goal.trajectory.header.stamp = rospy.Time.now()
            rospy.loginfo('joint_name = {0}, self.trajectory_goal = {1}'.format(joint_name, self.trajectory_goal))
            self.trajectory_client.send_goal(self.trajectory_goal)
            rospy.loginfo('Done sending pose.')
            wait_for_response = False
            if wait_for_response:
                # Send commands synchronously. Wait for the prior
                # command to finish before allowing a new command to
                # be sent.
                self.trajectory_client.wait_for_result()
                rospy.loginfo('Received the following result:')
                rospy.loginfo(self.trajectory_client.get_result())

                    
    def move_to_initial_configuration(self):
        initial_pose = {'joint_wrist_yaw': 0.0,
                        'joint_head_pan': -3.14159/2.0,
                        'joint_head_tilt': 0.0,
                        'gripper_aperture': 0.12,
                        'wrist_extension': 0.25,
                        'joint_lift': 0.9}
        rospy.loginfo('Move to visual servoing start pose.')
        self.move_to_pose(initial_pose, async=False)

        
    def fk_wrist_position(self):
        fk_wrist = None
        try:
            lookup_time = rospy.Time(0) # return most recent transform
            timeout_ros = rospy.Duration(0.1)
           
            tf2_time = rospy.Time.now() - rospy.Duration(0.5)
            fk_wrist = self.tf2_buffer.lookup_transform('camera_depth_optical_frame',
                                                        'link_aruco_inner_wrist',
                                                        lookup_time, timeout_ros)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            fk_wrist = None
        if fk_wrist is not None:
            t = fk_wrist.transform.translation
            fk_wrist = np.array([t.x, t.y, t.z])
        return fk_wrist
  
        
    def get_lift_wrist_joints(self, joint_state):
        joint_index = joint_state.name.index('joint_lift')
        lift_m = joint_state.position[joint_index]
        joint_index = joint_state.name.index('wrist_extension')
        wrist_m = joint_state.position[joint_index]
        return lift_m, wrist_m

    
    def main(self):
        hm.HelloNode.main(self, 'keyboard_teleop', 'keyboard_teleop', wait_for_first_pointcloud=True)

        self.tf2_buffer = tf2_ros.Buffer()
        self.tf2_listener = tf2_ros.TransformListener(self.tf2_buffer)
        
        rospy.Subscriber('/stretch/joint_states', JointState, self.joint_states_callback)
        rospy.Subscriber('/aruco/marker_array', MarkerArray, self.aruco_callback)

        self.marker_info = rospy.get_param('/aruco_marker_info')
        for k in self.marker_info.keys():
            m = self.marker_info[k]
            if m['link'] == 'link_aruco_top_wrist':
                self.wrist_top_marker_id = int(k)
            if m['link'] == 'link_aruco_inner_wrist':
                self.wrist_inner_marker_id = int(k)
            #if m['name'] == 'user_pointer':
            if m['name'] == 'base_left':
                self.user_pointer_marker_id = int(k)
        print('self.wrist_top_marker_id =', self.wrist_top_marker_id)
        print('self.user_pointer_marker_id =', self.user_pointer_marker_id)
                
        self.move_to_initial_configuration()
                
        rate = rospy.Rate(self.rate)

        while not rospy.is_shutdown():
            command = self.keys.get_command(self)
            rospy.loginfo(command)
            if command == 'toggle_error_printing':
                self.print_error = not self.print_error
            elif command == 'toggle_tracking':
                self.track_target = not self.track_target
            else: 
                self.send_command(command)

            rate.sleep()

        
if __name__ == '__main__':
    try:
        parser = ap.ArgumentParser(description='Keyboard teleoperation for stretch.')
        args, unknown = parser.parse_known_args()
        
        node = KeyboardTeleopNode()
        node.main()
    except KeyboardInterrupt:
        rospy.loginfo('interrupt received, so shutting down')

